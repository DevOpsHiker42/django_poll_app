version: 2.1

# Docker build & publish jobs based on example at:
# https://circleci.com/blog/using-circleci-workflows-to-replicate-docker-hub-automated-builds/

orbs:
  kubernetes: circleci/kubernetes@1.3

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: devopshiker42/django-polls
    docker:
      - image: circleci/buildpack-deps:stretch

commands:
  install-eksctl:
    description: Install eksctl
    steps:
      - run:
          # From:
          name: Install eksctl
          command: |
            echo "insecure" >> ~/.curlrc
            curl --silent --location \
              "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

  destroy-eks-cluster:
    description: Destroy eks cluster given a workflow ID
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: destroy cluster
          when: on_fail
          command: |
            echo "Destroying eks cluster with ID: << parameters.workflow_id >> "
            eksctl delete cluster --name "eksctl-cluster-"<< parameters.workflow_id >> \
              --region=us-east-1

  revert-migrations:
    description: revert last migration
    parameters:
      target_polls:
        type: string
        default: NOT_SET
      target_admin:
        type: string
        default: NOT_SET
      target_auth:
        type: string
        default: NOT_SET
      target_contenttype:
        type: string
        default: NOT_SET
      target_sessions:
        type: string
        default: NOT_SET
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Revert polls
            mig_polls=`python3 poll_site/manage.py showmigrations --list polls|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            if [ $mig_polls -ne << parameters.target_polls >> ]
              python poll_site/manage.py migrate polls << parameters.target_polls >>
            fi

            # Revert admin
            mig_admin=`python3 poll_site/manage.py showmigrations --list admin|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            if [ $mig_admin -ne << parameters.target_admin >> ]
              python poll_site/manage.py migrate admin << parameters.target_admin >>
            fi

            # Revert auth
            mig_auth=`python3 poll_site/manage.py showmigrations --list auth|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            if [ $mig_auth -ne << parameters.target_auth >> ]
              python poll_site/manage.py migrate auth << parameters.target_auth >>
            fi

            # Revert contenttypes
            mig_contenttypes=`python3 poll_site/manage.py showmigrations --list contenttypes|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            if [ $mig_contenttypes -ne << parameters.target_contenttypes >> ]
              python poll_site/manage.py migrate contenttypes << parameters.target_contenttypes >>
            fi

            # Revert sessions
            mig_sessions=`python3 poll_site/manage.py showmigrations --list sessions|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            if [ $mig_sessions -ne << parameters.target_sessions >> ]
              python poll_site/manage.py migrate sessions << parameters.target_sessions >>
            fi

jobs:
  qa:
    docker:
      - image: cimg/python:3.8.5
        environment:
          sky: $sky

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test

      - run:
          name: "check for model changes that haven't got migrations"
          command: |
            . venv/bin/activate
            make migrationcheck

  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

  create-eks-cluster:
    docker:
      - image: cimg/python:3.8.5
    steps:
      - checkout
      - install-eksctl
      - run:
          name: Create cluster
          command: |
            eksctl create cluster --name "eksctl-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region=us-east-1 \
              --tags project=django_poll_app

      # rollback cluster on failure
      - destroy-eks-cluster

  run-migrations:
    docker:
      - image: cimg/python:3.8.5
        environment:
          sky: $sky

    working_directory: ~/repo

    steps:
      - checkout
      - install-eksctl

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      - run:
          name: Run migrations
          command: |
            . venv/bin/activate

            # Get last migrations already applied in case we need to roll back
            export old_polls=\
              `python3 poll_site/manage.py showmigrations --list polls|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            export old_admin=\
              `python3 poll_site/manage.py showmigrations --list admin|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            export old_auth=\
              `python3 poll_site/manage.py showmigrations --list auth|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            export old_contenttypes=\
              `python3 poll_site/manage.py showmigrations --list contenttypes|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            export old_sessions=\
              `python3 poll_site/manage.py showmigrations --list sessions|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`

            # Run migrate
            python3 poll_site/manage.py migrate

            #test revert
            exit 1

      # revert migrations and rollback on failure
      - revert-migrations:
          target_polls: ${old_polls}
          target_admin: ${old_admin}
          target_auth: ${old_auth}
          target_contenttype: ${old_contenttypes}
          target_sessions: ${old_sessions}
      #- destroy-eks-cluster

workflows:
  default:
    jobs:
#      - qa
#      - docker-build:
#          requires:
#            - qa
#      - docker-publish-latest:
#          requires:
#            - docker-build
#          filters:
#            branches:
#              only: master
#      - create-eks-cluster:
#          requires: [docker-publish-latest]
      - run-migrations
#      - run-migrations:
#          requires: [create-eks-cluster]
#      - deploy-docker:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-docker]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
