version: 2.1

# Docker build & publish jobs based on example at:
# https://circleci.com/blog/using-circleci-workflows-to-replicate-docker-hub-automated-builds/

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3

executors:
  docker-publisher:
    environment:
      IMAGE_NAME: devopshiker42/django-polls
    docker:
      - image: circleci/buildpack-deps:stretch

commands:
  download-cache-dependencies:
    description: Download and cache dependencies
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  install-eksctl:
    description: Install eksctl
    steps:
      - run:
          # From:
          name: Install eksctl
          command: |
            echo "insecure" >> ~/.curlrc
            curl --silent --location \
              "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

  destroy-eks-cluster:
    description: Destroy eks cluster given a workflow ID
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: destroy cluster
          command: |
            echo "Destroying eks cluster with ID: << parameters.workflow_id >> "
            eksctl delete cluster --name "eksctl-cluster-"<< parameters.workflow_id >>

  revert-migrations:
    description: revert last migration
    steps:
      - run:
          name: Revert migrations
          command: |
            . venv/bin/activate

            pwd
            ls -ltr

            # Revert polls
            mig_polls=`python3 poll_site/manage.py showmigrations --list polls|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            echo "Current polls migration: "${mig_polls}
            last_polls=`cat last_polls.txt`
            echo "Previous polls migration: "${last_polls}
            if [ $mig_polls -ne $last_polls ]
            then
              python poll_site/manage.py migrate polls $last_polls
            fi

            # Revert admin
            mig_admin=`python3 poll_site/manage.py showmigrations --list admin|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            echo "Current admin migration: "${mig_admin}
            last_admin=`cat last_admin.txt`
            echo "Previous admin migration: "${last_admin}
            if [ $mig_admin -ne $last_admin ]
            then
              python poll_site/manage.py migrate admin $last_admin
            fi

            # Revert auth
            mig_auth=`python3 poll_site/manage.py showmigrations --list auth|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            echo "Current auth migration: "${mig_auth}
            last_auth=`cat last_auth.txt`
            echo "Previous auth migration: "${last_auth}
            if [ $mig_auth -ne $last_auth ]
            then
              python poll_site/manage.py migrate auth $last_auth
            fi

            # Revert contenttypes
            mig_contenttypes=`python3 poll_site/manage.py showmigrations --list contenttypes|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            echo "Current contenttypes migration: "${mig_contenttypes}
            last_contenttypes=`cat last_contenttypes.txt`
            echo "Previous contenttypes migration: "${last_contenttypes}
            if [ $mig_contenttypes -ne $last_contenttypes ]
            then
              python poll_site/manage.py migrate contenttypes $last_contenttypes
            fi

            # Revert sessions
            mig_sessions=`python3 poll_site/manage.py showmigrations --list sessions|grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}'`
            echo "Current sessions migration: "${mig_sessions}
            last_sessions=`cat last_sessions.txt`
            echo "Previous sessions migration: "${last_sessions}
            if [ $mig_sessions -ne $last_sessions ]
            then
              python poll_site/manage.py migrate sessions $last_sessions
            fi

jobs:
  qa:
    docker:
      - image: cimg/python:3.8.5
        environment:
          sky: $sky

    working_directory: ~/project

    steps:
      - checkout
      - download-cache-dependencies

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test

      - run:
          name: "check for model changes that haven't got migrations"
          command: |
            . venv/bin/activate
            make migrationcheck

  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar

  docker-publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest

  create-eks-cluster:
    docker:
      - image: cimg/python:3.8.5
    steps:
      - checkout
      - install-eksctl
      - run:
          name: Create cluster
          command: |
            eksctl create cluster --name "eksctl-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=django-polls

      # rollback cluster on failure
      - when:
          condition: on_fail
          steps:
            - install-eksctl
            - destroy-eks-cluster

  run-migrations:
    docker:
      - image: cimg/python:3.8.5
        environment:
          sky: $sky

    working_directory: ~/project

    steps:
      - checkout
      - download-cache-dependencies
      - install-eksctl

      - run:
          name: Get migrations already applied
          command: |
            . venv/bin/activate

            # Get last migrations already applied in case we need to roll back
            python3 poll_site/manage.py showmigrations --list polls| \
              grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}' > ./last_polls.txt
            python3 poll_site/manage.py showmigrations --list admin| \
              grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}' > ./last_admin.txt
            python3 poll_site/manage.py showmigrations --list auth| \
              grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}' > ./last_auth.txt
            python3 poll_site/manage.py showmigrations --list contenttypes| \
              grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}' > ./last_contenttypes.txt
            python3 poll_site/manage.py showmigrations --list sessions| \
              grep "\[X\]"|tail -1|awk '{print substr($2,1,4)}' > ./last_sessions.txt

      - persist_to_workspace:
          root: .
          paths:
            - ./last_polls.txt
            - ./last_admin.txt
            - ./last_auth.txt
            - ./last_contenttypes.txt
            - ./last_sessions.txt

      - run:
          name: Run migrations
          command: |
            . venv/bin/activate

            # Run migrate
            python3 poll_site/manage.py migrate

      # revert migrations and rollback on failure
      - when:
          condition: on_fail
          steps:
            - revert-migrations
            - install-eksctl
            - destroy-eks-cluster

  deploy-to-eks:
    docker:
      - image: cimg/python:3.8.5
        environment:
          DOCKERHUB_USERNAME: $DOCKERHUB_USERNAME
          DOCKERHUB_PASSWORD: $DOCKERHUB_PASSWORD
          DOCKERHUB_EMAIL: $DOCKERHUB_EMAIL
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-eksctl
      - download-cache-dependencies

      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: eksctl-cluster-${CIRCLE_WORKFLOW_ID:0:7}
          install-kubectl: true
      - run:
          name: Get cluster information
          command: |
            kubectl version
            kubectl get nodes
      - run:
          name: Create dockercreds
          command: |
            kubectl create secret docker-registry dcreds \
              --docker-server=https://index.docker.io/v1/ \
              --docker-username=$DOCKERHUB_USERNAME \
              --docker-password=$DOCKERHUB_PASSWORD \
              --docker-email=$DOCKERHUB_EMAIL
      - kubernetes/create-or-update-resource:
          get-rollout-status: false
          resource-file-path: django-polls-deployment.yml
          resource-name: deployment/django-polls-deployment
      - run:
          name: Get deployments
          command: |
            kubectl get deployments
      - run:
          name: Get pod details
          command: |
            kubectl get pods -l 'app=django-polls' -o wide | awk {'printf("%-30s %-30s %-30s\n",$1,$3,$6)'}
      - run:
          name: Expose app via load balancer service
          command: |
            kubectl create -f loadbalancer.yml
      - run:
          name: Get service details
          command: |
            kubectl get service/django-polls-loadbalancer | awk {'printf("%-30s %-30s %-30s %-30s\n",$1,$2,$4,$5)'}
            kubectl get service/django-polls-loadbalancer |  tail -1 | awk {'print $4'} > lb_address.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./lb_address.txt

      # revert migrations and rollback on failure
      - when:
          condition: on_fail
          steps:
            - revert-migrations
            - install-eksctl
            - destroy-eks-cluster

  smoke-test:
    docker:
      - image: cimg/python:3.8.5
    steps:
      - checkout
      - download-cache-dependencies
      - install-eksctl

      - attach_workspace:
          at: .
      - run:
          name: Smoke test
          command: |
            URL=`cat lb_address.txt`
            RESPONSE=`curl -s ${URL}`
            echo "URL:"${URL}
            echo "RESPONSE:"${RESPONSE}
            if [ -z "${RESPONSE}" ]
            then
              return 0
            else
              return 1
            fi

      # revert migrations and rollback on failure
      - when:
          condition: on_fail
          steps:
            - revert-migrations
            - install-eksctl
            - destroy-eks-cluster

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install-eksctl
      - download-cache-dependencies

      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Store old workflow ID
          command: |
            export OldWorkflowID=$(aws cloudformation list-exports \
              --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID > OldWorkflowID.txt
            echo "Storing old workflow ID: "${OldWorkflowID}
      - run:
          name: Update cloudfront distribution
          command: |
            URL=`cat lb_address.txt`
            aws cloudformation deploy \
              --template-file cloudfront.yml \
              --stack-name DjangoPollsCloudFrontStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" OriginURL="${URL}" \
              --tags project=django-polls
      - persist_to_workspace:
          root: .
          paths:
            - ./OldWorkflowID.txt

      # revert migrations and rollback on failure
      - when:
          condition: on_fail
          steps:
            - revert-migrations
            - install-eksctl
            - destroy-eks-cluster

  cleanup:
    docker:
      - image: cimg/python:3.8.5
    steps:
      - checkout
      - install-eksctl
      - attach_workspace:
          at: .
      - run:
          name: Remove old cluster
          command: |
            export OldWorkflowID=`cat OldWorkflowID.txt`
            echo "Old workflow ID: "${OldWorkflowID}
            # Check if the cluster exists
            export OLDCLUSTER=`eksctl get clusters|grep ${OldWorkflowID}`
            echo "OLDCLUSTER="${OLDCLUSTER}
            echo
            if [[ -n "${OLDCLUSTER}" ]]
            then
              echo "------------------------------------------------------------"
              echo "Removing old cluster with workflow ID ${OldWorkflowID}"
              eksctl delete cluster --name "eksctl-cluster-"${OldWorkflowID}
              echo "------------------------------------------------------------"
            else
              echo "------------------------------------------------------------"
              echo "Nothing to clean up for workflow ID ${OldWorkflowID}"
              echo "------------------------------------------------------------"
            fi
            echo
            eksctl get clusters

workflows:
  default:
    jobs:
      - qa
      - docker-build:
          requires:
            - qa
      - docker-publish-latest:
          requires:
            - docker-build
          filters:
            branches:
              only: master
      - create-eks-cluster:
          requires:
            - docker-publish-latest
          filters:
            branches:
              only: master
      - run-migrations:
          requires: [docker-publish-latest, create-eks-cluster]
      - deploy-to-eks:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-to-eks]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
